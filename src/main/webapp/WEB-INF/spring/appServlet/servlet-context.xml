<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--기본 패키지를 추가한다
	그러면 새로운 요청이 들어왔을때 아래 2개의 패키지를 검색(scan) 하여 컨트롤러를 찾게된다.
	  -->
	<context:component-scan base-package="com.kosmo.k11jdbctemplate" />
	
	<!-- Spring -JDBC 1차버전에서 사용 : new 로 DAO 객체 생성-->
<!-- 	<context:component-scan base-package="springboard.controller" /> -->


	<!-- Spring -JDBC 2차버전에서 사용 : DI 로 DAO 객체 생성-->
	<context:component-scan base-package="springboard" />
	
	<!--  
	SPRING JDBC를 사용하기 위한 빈 생성
	해당 XML 파일에서 JDBC 연결을 위한 빈을 생성한 후 컨트롤러에서
	자동 주입(AUTOWIRED) 받아서 사용하게된다.
	
	org.springframework.jdbc.datasource.DriverManagerDataSource.class
	
	org.springframework.jdbc.core.JdbcTemplate.class
	-->
	<!--  오라클 연결 정보를 가진 dataSource 빈 생성-->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="kosmo" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	
	<!-- dataSource 를 기반으로 JDBCTemplate 을 사용하기 위한 빈 -->
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!--template 를 기반으로 게시판에서 사용한 DAO 빈   생성 -->
	<beans:bean name="dao" class="model.JDBCTemplateDAO">
	
	<!--
	 :) <beans:property name="template" 
	JDBCTemplateDAO 에 template setter 생성하고 에러 사라짐
	레파지토리 어노테이션은 setter 를 기반으로 빈을 자동주입 받는다.
	 -->
		<beans:property name="template" ref="template"></beans:property>
	</beans:bean>
	
	
	
	
	
	
	
</beans:beans>
